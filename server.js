require('dotenv').config()

const express = require('express')
const path = require('path')
const cookieParser = require('cookie-parser')
const cors = require('cors')
const mongoose = require('mongoose')

const app = express()
const PORT = process.env.PORT || 3500

// üß† Connexion √† MongoDB
const connectDB = require('./config/dbConn')
connectDB()

// üß† Middleware personnalis√©
const { logger, logEvents } = require('./middleware/logger')
const errorHandler = require('./middleware/errorHandler')
const notFound = require('./middleware/notFound')

// üß† Routes
const rootRoutes = require('./routes/root')
const authRoutes = require('./routes/authRoutes')
const userRoutes = require('./routes/userRoutes')
const courseRoutes = require('./routes/courseRoutes')

// üß† CORS config
const corsOptions = require('./config/corsOptions')

// üåê Middlewares globaux
app.use(logger)
app.use(cors(corsOptions))
app.use(express.json())
app.use(cookieParser())

// üìÅ Fichiers statiques (public)
app.use('/', express.static(path.join(__dirname, 'public'), {
  dotfiles: 'deny',
  etag: false,
  maxAge: '1d',
  immutable: true
}))

// üß≠ Routes principales
app.use('/api', rootRoutes)
app.use('/api/auth', authRoutes)
app.use('/api/users', userRoutes)
app.use('/api/courses', courseRoutes)

// ‚úÖ Route de sant√© (health check)
app.get('/health', (req, res) => {
  res.json({ status: 'ok', service: 'CoorinMath API', uptime: process.uptime() })
})

// üö´ 404 handler (doit √™tre apr√®s toutes les routes)
app.use(notFound)

// üõ†Ô∏è Error handler (doit √™tre le dernier middleware)
app.use(errorHandler)

// üß† MongoDB events
mongoose.connection.once('open', () => {
  console.log('‚úÖ Connected to MongoDB')
  app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`))
})

mongoose.connection.on('error', err => {
  console.error('‚ùå MongoDB connection error:', err)
  logEvents(
    `${err.no || ''}: ${err.code || ''}\t${err.syscall || ''}\t${err.hostname || ''}`,
    'mongoErrLog.log'
  )
})
