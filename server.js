require('dotenv').config()
const express = require('express')
const path = require('path')
const cookieParser = require('cookie-parser')
const cors = require('cors')
const mongoose = require('mongoose')

// üì¶ Configs & middlewares personnalis√©s
const connectDB = require('./config/dbConn')
const { logger, logEvents } = require('./middleware/logger')
const errorHandler = require('./middleware/errorHandler')
const notFound = require('./middleware/notFound')
const corsOptions = require('./config/corsOptions')

// üß† Connexion √† MongoDB
connectDB()

const app = express()
const PORT = process.env.PORT || 3500

// üõ°Ô∏è Corrige le probl√®me de proxy pour Render/Heroku
app.set('trust proxy', 1)

// üåê Middlewares globaux
app.use(logger)
app.use(cors(corsOptions))
app.use(express.json())
app.use(cookieParser())

// üìÅ Fichiers statiques
app.use('/static', express.static(path.join(__dirname, 'public'), {
  dotfiles: 'deny',
  etag: false,
  maxAge: '1d',
  immutable: true
}))

// üß≠ Routes principales
app.use('/', require('./routes/root'))
app.use('/auth', require('./routes/authRoutes'))
app.use('/users', require('./routes/userRoutes'))
app.use('/courses', require('./routes/courseRoutes'))

// üö´ Gestion des routes non trouv√©es
app.use(notFound)

// üõ†Ô∏è Gestion des erreurs
app.use(errorHandler)

// üöÄ Lancement du serveur apr√®s connexion MongoDB
mongoose.connection.once('open', () => {
  console.log('‚úÖ Connected to MongoDB')
  app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`))
})

// üî• Gestion des erreurs MongoDB
mongoose.connection.on('error', err => {
  console.error('‚ùå MongoDB connection error:', err)
  logEvents(`${err.no}: ${err.code}\t${err.syscall}\t${err.hostname}`, 'mongoErrLog.log')
})
